<?php

/**
 * @file
 * display of a google map as cck field
 */

/**
 * @addtogroup hooks
 * @{
 */


/**
 * Declare information about a field type.
 *
 * @return
 *   An array keyed by field type name. Each element of the array is an associative
 *   array with these keys and values:
 *   - "label": The human-readable label for the field type.
 */
function gmap_cck_field_info() {
  return array(
      'gmap_cck' => array(
          'label' => 'Google map view',
          'settings' => array(
              'maptype' => '', 
              'controltype' => '', 
              'width' => '300px', 
              'height' => '200px', 
              'alignment' => '',
              'zoom' => '9', 
              'latlong' => null, 
              'gpx' => '', 
              'gpx_src' => '', 
              'marker_noderef' => '' ),
          'instance_setting' => array(
              'maptype' => '', 
              'controltype' => '', 
              'width' => '300px', 
              'height' => '200px', 
              'alignment' => '',
              'zoom' => '9', 
              'latlong' => null, 
           ),
          'default_widget' => 'gmap_cck',
          'default_formatter' => 'gmap_cck',
      )
  );
}

/**
 * 
 * Implements hook_field_instance_settings_form().
 * 
 */
function gmap_cck_field_instance_settings_form($field, $instance) {

	$def = gmap_defaults();
  foreach ( $field['settings'] as $key => $value )
			if ( $value ) $def[$key] = $value;
  foreach ( $instance['settings']['macroform'] as $key => $value )
			if ( $value ) $def[$key] = $value;
  
  $f = array();
  $form_state = array();
	$f = gmap_macro_builder_form( $f, $form_state, $def );
  //  the member what is not array caused "Undefined operand error".
	$form = array( "macroform" => $f["macroform"] );
  
	$form['#title'] = t('Google Map settings');
	// keep: mapdiv
	unset($form['macroform']['overlayedit']);
	unset($form['macroform']['mapid']);
	// keep: maptype, controltype
	unset($form['macroform']['address']);
	//unset($form['macroform']['latlong']);
	// keep: width, height, alignment, zoom
	unset($form['macroform']['macro']);

	// GPX file support
	$gpx_opts = array(t('Disabled'));
	if (module_exists('filefield'))
		$gpx_opts['filefield'] = t('CCK Filefield');
	// TODO: attachment to node, uploaded file, url from user, ...

	if (count($gpx_opts) > 1) {
		$form['gpx'] = array(
			'#type' => 'select',
			'#title' => t("GPX File support"),
			'#options' => array(
				0 => t('Disabled'),
				'filefield' => t('CCK Filefield'),
			),
			'#default_value' => $field['gpx'],
		);

		// if gpx-support is enabled we need a source for the data
		$form['gpx_src'] = array(
			'#type' => 'textfield',
			'#title' => t('GPX data source parameter'),
			'#description' => t('Only used if gpx-support is enabled'),
			'#default_value' => $field['gpx_src'],
		);
	}

	// noderef field(s) to nodes with locations for markers
	if (module_exists('nodereference')) {
		$form['marker_noderef'] = array(
			'#type' => 'textfield',
			'#title' => t('Marker noderef'),
			'#description' => t('Name of noderef field to nodes to show as markers'),
			'#default_value' => $field['marker_noderef']
		);
	}

	return $form;
}

/**
 * 
 * Implements hook_field_formatter_info()
 * 
 */
function gmap_cck_field_formatter_info() {
  return array(
    'gmap_cck' => array(
      'label' => t('Default map'),
      'field types' => array('gmap_cck')
   ),
    // TODO: add list of configurable small map-displays
  );
}

/**
 * 
 * Implements hook_field_formatter_view().
 * 
 */
function gmap_cck_field_formatter_view( $entity_type, $entity, $field, $instance, $langcode, $items, $display ) {
  
  $elements = array();
  
  foreach ( $items as $delta=>$m ) {
    
    if (!is_array($m)) $m = array();
    if (!empty($field['gpx']) && _gmap_cck_check_gpx_source($m, $field, $node)) {
      _gmap_cck_get_gpx($m, $field, $node);
    }
    if (!empty($field['marker_noderef'])) {
      _gmap_cck_noderef_markers($m, $field, $node);
    }
    $map = array_merge(gmap_defaults(), $field, $m);

    $map['id'] = 'gmap';
    if (isset($node) && isset($node->nid)) $map['id'] .= '_n'. $node->nid;
    $map['id'] .= '_'. $field['field_name'];

    // TODO: correct width, height & zoom if ($formatter != 'default')
    
    $elements[$delta] = array(
        "#type" => "gmap",
        "#gmap_settings" => $map
//        "#markup" => theme('gmap', array('element' => array( '#gmap_settings' => $map)))
    );
    
  }

  return $elements;
  
}


/**
 * 
 * Implements hook_field_widget_info().
 *
 */
function gmap_cck_field_widget_info() {
  return array(
    'gmap_cck' => array(
      'label' => 'Google Map',
      'field types' => array('gmap_cck'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function gmap_cck_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
	
  _gmap_cck_parse_data($items);
	$rd = & $items[0]; // raw data
	if (empty($rd))
		$rd = array();
  
  unset( $rd["id"] );

	$ndefs = array();
  if ( isset($field['settings']['maptype']) and $field['settings']['maptype'] ) $ndefs['maptype'] = $field['settings']['maptype'];
  if ( isset($field['settings']['width']) and $field['settings']['width'] ) $ndefs['width'] = $field['settings']['width'];
  if ( isset($field['settings']['height']) and $field['settings']['height'] ) $ndefs['height'] = $field['settings']['height'];
  if ( isset($field['settings']['zoom']) and $field['settings']['zoom'] ) $ndefs['zoom'] = $field['settings']['zoom'];
  if ( isset($field['settings']['latlong']) and $field['settings']['latlong'] ) $ndefs['latlong'] = $field['settings']['latlong'];

	if (isset($rd['gpx'])) {
		$gpx_support = array('#value' => 'GPX support enabled');
		_gmap_cck_get_gpx($rd, $field, $node);
	}
	$ndefs = array_merge(gmap_defaults(), $ndefs, $rd);
	$hide = array('mapid' => 1, // type=hidden
		'width' => 1, 'height' => 1, //'alignment' => 1, // 'zoom' => 2,
		'maptype' => 1, 'controltype' => 1, 'macro' => 2,
	);
  
	$f = gmap_macro_builder_form($form, $form_state, $ndefs, $hide);

	// remove/hide unwanted parts of form
	$mf = & $f['macroform'];
	$mf['#title'] = t('Select map view');
  $mf['mapdiv']['#gmap_settings'] = &$mf['mapdiv']['#settings'];
  
//  remove #overlayedit makes disable the function to point on the map.
//	unset($mf['overlayedit'], $mf['address']);

//	foreach ($mf as $key => $val) {
//		if ($key[0] == '#')
//			continue;
//		$mf['#tree'] = true;
//		$mf['#parents'] = array($field['field_name']);
//	}

  $mf['overlayedit']['#attributes']['class'][] = 'collapsible';
  $mf['overlayedit']['#attributes']['class'][] = 'collapsed';

  if (isset($gpx_support)) {
		$form['gpx_support'] = $gpx_support;
	}

	return $mf;
}

/**
 * Implements hook_field_widget_error().
 */
function gmap_cck_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element['value'], $error['message']);
}

function gmap_cck_field_is_empty($item, $field) {
}

/**
 * Implements hook_field_prepare_view().
 */
function gmap_cck_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  foreach ($items as $entity_id => &$entity_items) {
    _gmap_cck_parse_data( $entity_items );
  }
}

/**
 * @} End of "addtogroup hooks".
 */

function _gmap_cck_parse_data( &$entity_items ) {
  foreach ($entity_items as $delta => $value) {
    if ( isset( $value['macro'] ) )  //  for preview mode ('data' is not set).
      $entity_items[$delta] += gmap_parse_macro( $value['macro'] );
  }
}

function _gmap_cck_check_gpx_source(&$data, &$field, &$node) {
  $r = true;
  if ($field['gpx'] == 'filefield') {
    $fname = 'field_'. $field['gpx_src'];
    $ff =& $node->$fname;
    $r = (isset($ff) && _gmap_cck_gpxdata_filefield($data, $ff));
  }
  if (!$r) {
    // TODO: ev. try to use $data['gpx']['file']
    unset($data['gpx']);
  }
  return $r;
}

/**
 * try to always get filedata from filefield, even if we're in preview mode
 */
function _gmap_cck_gpxdata_filefield(&$v, &$filefield) {
  foreach ($filefield as $i => $data) {
    if (!isset($data['filepath'])) continue;
    $v['gpx'] = array(
      'type' => 'file',
      'file' => $data['filepath'],
    );
    return true;
  }
  return false;
}

/**
 * process gpx-parameter to show something on the map
 */
function _gmap_cck_get_gpx(&$settings, &$field, &$node) {
  require_once('gmap_gpx.inc');
  if ($settings['gpx']['type'] == 'file') {
    $f = $settings['gpx']['file'];
    if (!file_exists($f)) { // was in temp location last time we looked?
      if (!isset($field) || !isset($node)) return false;
      if (!_gmap_cck_check_gpx_source($settings, $field, $node)) return false;
      $f = $settings['gpx']['file'];
    }
    gmap_gpx_parse_file($f);
    gmap_gpx_data2map($settings);
    gmap_gpx_cleanup();
  }
  unset($settings['gpx']);
  return true;
}

/**
 * load locations from nodes pointed at with noderef field, show markers
 */
function _gmap_cck_noderef_markers(&$settings, &$field, &$node) {
  $fname = 'field_'. $field['marker_noderef'];
  $nrf =& $node->$fname;
  $nids = array();
  foreach ($nrf as $delta => $item) {
    if (!empty($item['nid']) && is_numeric($item['nid'])) {
      $nids[] = $item['nid'];
      $n = node_load($item['nid']);
      if ($n) {
        $settings['markers'][] = array(
          'label' => $n->title,
          'opts' => array('title' => $n->title),
          'latitude' => $n->locations[0]['latitude'],
          'longitude' => $n->locations[0]['longitude'],
          'markername' => variable_get('gmap_node_marker_'. $n->type, 'drupal'),
          'text' => theme('gmapnodelabel', $n), // TODO:
          //'popuplink' => url('map/query/node/'. $n->nid),
        );
      }
    }
  }
/* TODO: go this route if we have too many (how many?) nodes
  if (count($nids)) {
    $nidstr = implode(',', $nids);
    //$res = db_query("SELECT * FROM {location} l , {node_revisions} nr WHERE".
    //  " l.type = 'node' AND l.eid = nr.vid AND nr.nid IN('$nidstr')");
    $res = db_query("SELECT nr.title, n.nid, n.type, max(nr.vid) vid,".
      " l.latitude, l.longitude FROM location l, node n, node_revisions nr".
      " WHERE l.type = 'node' AND l.eid = nr.vid AND n.nid = nr.nid AND".
      " nr.nid IN($nidstr) GROUP BY n.nid");
    $locs = array();
    while ($nl = db_fetch_object($res)) {
      if (!isset($locs[$nl->nid]) || ($locs[$nl->nid]->timestamp < $nl->timestamp)) {
        $locs[$nl->nid] = $nl;
      }
    }
    foreach ($locs as $nid => $nl) {
      $settings['markers'][] = array(
        'label' => $nl->title,
        'latitude' => $nl->latitude,
        'longitude' => $nl->longitude,
        'markername' => variable_get('gmap_node_marker_'. $nl->type, 'drupal'),
        //'text' => theme('gmapnodelabel',$nl), // TODO:
        'popuplink' => url('map/query/node/'. $nl->nid),
      );
    }
  }
*/
}
